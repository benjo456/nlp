import nltk
from os import listdir
from os.path import isfile, join
import Emails, Tagger
global email
'''
This program takes in a file, processes it and tags it, and then returns the extracted information to file
'''
'''
#This ideally needs to be done in a different file
def readIn(mypath, corpus_root):
    #Read in files
    onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]
    corpus = nltk.corpus.reader.plaintext.PlaintextCorpusReader(corpus_root, onlyfiles)
    #Create email object, with header and body
    preProcess(corpus)
'''
test = """<0.21.10.91.13.38.52.maa+@ISL1.RI.CMU.EDU (Michelle Agie).0>
Type:     cmu.cs.robotics
Who:      Fritz Prinz (EDRC)
Topic:    The Programmable Automated Welding System
Dates:    25-Oct-91
Time:     12:00 PM - 1:00 PM
Place:    3313 Doherty Hall (Large conf. room)
PostedBy: maa+ on 21-Oct-91 at 13:38 from ISL1.RI.CMU.EDU (Michelle Agie)
Abstract: 


 SPEAKER: Fritz Prinz (EDRC)

 DATE: Friday Oct 25, 1991

 TIME: 12:00noon - 1:00pm

 Place:3313 Doherty Hall (Large conf. room)

 TITLE: The Programmable Automated Welding System

The trend toward manufacturing in small lot sizes continues, imposing
ever new demands on the responsiveness of companies to consumer demands.
 To be cost competitive, this requires the designer to perform part of
the manufacturing planning early in the design phase.  Towards this end
a number of decision support tools have been developed, providing
designers with vital information regarding the manufacturability of a
part or a product.  Part of any manufacturability study includes the
simulations of the processes involved.  It is important that the
designer can investigate different manufacturing scenerios and
succesfully choose one within the constraints of his organization or the
ones he can easily access.  Dr. Prinz will describe the requirements of
an environment in which a part can be designed incorparating both the
geometric and non-geometric information required for a complete
product/manufacturing process description.  

His presentation will describe the non-procedural Programable Automated
Welding-System (PAWS) package.  This system has three major components,
namely, a non-manifold solid modeler for part, equipment, and
environment definition, an SQL (Standard Query Language) compatible
database for process definition, and a robotic motion planning module
capable of motion optimization, interference detection and graphic
simulation.  Although this system focuses on the welding process, the
key components of the system are equally relevant to other manufacturing
strategies such as grinding, spraying, deburring, and cutting.


"""
def splitCorpus(content):
    #Split file into header and body
   # with open(file, 'r') as f:
   #     content = f.read()
        abstractLocation = content.index("Abstract")
        header = content[0:abstractLocation-1]
        body = content[abstractLocation::]
        email = Emails.Email(body,header)
        #print(email.header)
        #print(email.body)
        tagger = Tagger.Tagger(email)
        tagger.tagTimes(email.header)
        tagger.tagSpeaker()

def preProcess(content):
    #Lemmatize and stemmping
    pass

def tokenMaker():
    #Tokenise
    pass

def tagTheEmail():
    #return tagger.tagWholeEmails()
    pass

def tagTopics():
    #tag topics, will come in helpful later
    pass

splitCorpus(test)